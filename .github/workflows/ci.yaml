name: CI Pipeline

on:
  push:
    paths-ignore:
      - 'README.md'
      
jobs:
  project-testing:
    runs-on: ubuntu-latest

    steps:
          - name: checkout code
            uses: actions/checkout@v3

          - name: setup python
            uses: actions/setup-python@v4
            with:
              python-version: '3.12'

          - name: Cache pip dependencies
            uses: actions/cache@v3
            with:
              path: ~/.cache/pip
              key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
              restore-keys: |
                ${{ runner.os }}-pip-

          - name: Install dependencies
            run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt

          - name: Install DVC and DagsHub Support
            run: |
              pip install "dvc[http]" dagshub

          - name: Set up DVC remote authentication
            run: |
              dvc remote modify origin --local auth basic
              dvc remote modify origin --local user AkHiLdEvGoD
              dvc remote modify origin --local password ${{ secrets.PERSONALITY_TEST }}

          - name: Pull DVC data
            run: dvc pull

          - name: run pipeline
            env:
              PERSONALITY_TEST: ${{ secrets.PERSONALITY_TEST }}
            run: |
              dvc repro

          - name: run model test
            env:
              PERSONALITY_TEST: ${{ secrets.PERSONALITY_TEST }}
            run: python -m unittest tests/test_model.py

          - name: Promote model to production
            if: success()
            env:
              PERSONALITY_TEST: ${{ secrets.PERSONALITY_TEST }}
            run: python scripts/promote_model.py

          - name: Run Flask app tests
            if: success()
            env:
              PERSONALITY_TEST: ${{ secrets.PERSONALITY_TEST }}
            run: python -m unittest tests/test_api.py

          - name: Set up Docker Buildx
            if: success()
            uses: docker/setup-buildx-action@v2

          - name: Build FastAPI backend Docker image
            if: success()
            run: |
              docker build -f Dockerfile -t fastapi-backend .

          - name: Run and test Docker container (optional)
            if: success()
            run: |
              docker run -d -p 8000:8000 --name backend-test \
              -e PERSONALITY_TEST=${{ secrets.PERSONALITY_TEST }} \
              fastapi-backend

              echo "Waiting for server to start..."
              sleep 15

              echo "Running health check..."
              curl --fail http://localhost:8000/health | grep -q '"status":"up"' || exit 1

              echo "Stopping and removing container..."
              docker stop backend-test && docker rm backend-test